id: program-security
name: Program Security

award:
  belt: yellow

description: |
  It is all too easy to live life without questioning the arcane logic underlying our reality.
  How do the programs we use every day actually work?
  How do the mysteries deep within these programs impact their security?
  Hackers delve into these secrets, learning the subtle dance that all programs follow, and infusing it with unexpected improvisation.
  In this dojo, you will not only learn the true form of this dance, but develop the skill to impact it.

type: topic

modules:

- id: memory-errors
  name: Memory Errors
  description: ""
  challenges:
  - id: level-1-0
    name: level1.0
    description: Overflow a buffer on the stack to set the right conditions to obtain the flag!
  - id: level-1-1
    name: level1.1
    description: Overflow a buffer on the stack to set the right conditions to obtain the flag!
  - id: level-2-0
    name: level2.0
    description: Overflow a buffer on the stack to set trickier conditions to obtain the flag!
  - id: level-2-1
    name: level2.1
    description: Overflow a buffer on the stack to set trickier conditions to obtain the flag!
  - id: level-3-0
    name: level3.0
    description: Overflow a buffer and smash the stack to obtain the flag!
  - id: level-3-1
    name: level3.1
    description: Overflow a buffer and smash the stack to obtain the flag!
  - id: level-4-0
    name: level4.0
    description: Overflow a buffer and smash the stack to obtain the flag, but this time bypass a check designed to prevent
      you from doing so!
  - id: level-4-1
    name: level4.1
    description: Overflow a buffer and smash the stack to obtain the flag, but this time bypass a check designed to prevent
      you from doing so!
  - id: level-5-0
    name: level5.0
    description: Overflow a buffer and smash the stack to obtain the flag, but this time bypass another check designed to
      prevent you from doing so!
  - id: level-5-1
    name: level5.1
    description: Overflow a buffer and smash the stack to obtain the flag, but this time bypass another check designed to
      prevent you from doing so!
  - id: level-6-0
    name: level6.0
    description: Overflow a buffer and smash the stack to obtain the flag, but this time bypass another check designed to
      prevent you from doing so!
  - id: level-6-1
    name: level6.1
    description: Overflow a buffer and smash the stack to obtain the flag, but this time bypass another check designed to
      prevent you from doing so!
  - id: level-7-0
    name: level7.0
    description: Overflow a buffer and smash the stack to obtain the flag, but this time in a position independent (PIE) binary!
  - id: level-7-1
    name: level7.1
    description: Overflow a buffer and smash the stack to obtain the flag, but this time in a position independent (PIE) binary!
  - id: level-8-0
    name: level8.0
    description: Overflow a buffer and smash the stack to obtain the flag, but this time in a position independent (PIE) binary
      with an additional check on your input.
  - id: level-8-1
    name: level8.1
    description: Overflow a buffer and smash the stack to obtain the flag, but this time in a position independent (PIE) binary
      with an additional check on your input.
  - id: level-9-0
    name: level9.0
    description: Overflow a buffer and smash the stack to obtain the flag, but this time in a PIE binary with a stack canary.
      Be warned, this requires careful and clever payload construction!
  - id: level-9-1
    name: level9.1
    description: Overflow a buffer and smash the stack to obtain the flag, but this time in a PIE binary with a stack canary.
      Be warned, this requires careful and clever payload construction!
  - id: level-10-0
    name: level10.0
    description: Overflow a buffer and leak the flag. Be warned, this requires careful and clever payload construction!
  - id: level-10-1
    name: level10.1
    description: Overflow a buffer and leak the flag. Be warned, this requires careful and clever payload construction!
  - id: level-11-0
    name: level11.0
    description: Overflow a buffer and leak the flag. Be warned, this requires careful and clever payload construction!
  - id: level-11-1
    name: level11.1
    description: Overflow a buffer and leak the flag. Be warned, this requires careful and clever payload construction!
  - id: level-12-0
    name: level12.0
    description: Defeat a stack canary in a PIE binary by utilizing a bug left in the binary.
  - id: level-12-1
    name: level12.1
    description: Defeat a stack canary in a PIE binary by utilizing a bug left in the binary.
  - id: level-13-0
    name: level13.0
    description: Leak data left behind unintentionally by utilizing clever payload construction.
  - id: level-13-1
    name: level13.1
    description: Leak data left behind unintentionally by utilizing clever payload construction.
  - id: level-14-0
    name: level14.0
    description: Leak data left behind unintentionally to defeat a stack canary in a PIE binary.
  - id: level-14-1
    name: level14.1
    description: Leak data left behind unintentionally to defeat a stack canary in a PIE binary.
  - id: level-15-0
    name: level15.0
    description: Defeat a stack canary in a PIE binary by utilizing a network-style fork server in the target binary.
  - id: level-15-1
    name: level15.1
    description: Defeat a stack canary in a PIE binary by utilizing a network-style fork server in the target binary.
  resources:
  - name: Further Reading
    type: markdown
    content: |
      * OpenSecurityTraining2 has courses covering security vulnerabilities: [Vulnerabilities 1001](https://ost2.fyi/Vulns1001) and [Vulnerabilities 1002](https://ost2.fyi/Vulns1002).

- id: program-exploitation
  name: Program Exploitation
  description: ""
  challenges:
  - id: level-1-0
    name: level1.0
    description: Write a full exploit involving shellcode and a method of tricking the challenge into executing it.
  - id: level-1-1
    name: level1.1
    description: Write a full exploit involving shellcode and a method of tricking the challenge into executing it.
  - id: level-2-0
    name: level2.0
    description: Write a full exploit involving injecting shellcode and a method of tricking the challenge into executing it.  Note, ASLR is disabled!
  - id: level-2-1
    name: level2.1
    description: Write a full exploit involving injecting shellcode and a method of tricking the challenge into executing it.  Note, ASLR is disabled!
  - id: level-3-0
    name: level3.0
    description: Write a full exploit involving injecting shellcode and a method of tricking the challenge into executing it by utilizing clever payload construction.
  - id: level-3-1
    name: level3.1
    description: Write a full exploit involving injecting shellcode and a method of tricking the challenge into executing it by utilizing clever payload construction.
  - id: level-4-0
    name: level4.0
    description: Write a full exploit involving injecting shellcode, reverse engineering, and a method of tricking the challenge into executing your payload.
  - id: level-4-1
    name: level4.1
    description: Write a full exploit involving injecting shellcode, reverse engineering, and a method of tricking the challenge into executing your payload.
  - id: level-5-0
    name: level5.0
    description: Write a full exploit involving injecting shellcode, reverse engineering, seccomp, and a method of tricking the challenge into executing your payload.
  - id: level-5-1
    name: level5.1
    description: Write a full exploit involving injecting shellcode, reverse engineering, seccomp, and a method of tricking the challenge into executing your payload.
  - id: level-6-0
    name: level6.0
    description: Write a full exploit involving injecting shellcode, reverse engineering, seccomp, and a method of tricking the challenge into executing your payload.
  - id: level-6-1
    name: level6.1
    description: Write a full exploit involving injecting shellcode, reverse engineering, seccomp, and a method of tricking the challenge into executing your payload.
  - id: level-7-0
    name: level7.0
    description: Write a full exploit for a custom VM involving injecting shellcode and a method of tricking the challenge into executing it by locating and utilizing a bug in the challenge.  Note, ASLR is disabled!
  - id: level-7-1
    name: level7.1
    description: Write a full exploit for a custom VM involving injecting shellcode and a method of tricking the challenge into executing it by locating and utilizing a bug in the challenge.  Note, ASLR is disabled!
  - id: level-8-0
    name: level8.0
    description: Write a full exploit for a custom VM involving injecting shellcode, and a method of tricking the challenge into executing it by locating and utilizing a bug in the challenge.
  - id: level-8-1
    name: level8.1
    description: Write a full exploit for a custom VM involving injecting shellcode, and a method of tricking the challenge into executing it by locating and utilizing a bug in the challenge.
  - id: level-9-0
    name: level9.0
    description: 'Provide your own Yan85 shellcode! This time, it''s filtered '
  - id: level-9-1
    name: level9.1
    description: 'Provide your own Yan85 shellcode! This time, it''s filtered '
  - id: level-10-0
    name: level10.0
    description: The ultimate Yan85 challenge. Provide your own Yan85 shellcode.
  - id: level-10-1
    name: level10.1
    description: The ultimate Yan85 challenge. Provide your own Yan85 shellcode.
  - id: level-11-0
    name: level11.0
    description: The ultimate Yan85 challenge. Provide your own Yan85 shellcode. Now updated for modern hardware!
  - id: level-11-1
    name: level11.1
    description: The ultimate Yan85 challenge. Provide your own Yan85 shellcode. Now updated for modern hardware!

- id: return-oriented-programming
  name: Return Oriented Programming
  description: |
    Picture yourself as a digital maestro, orchestrating a symphony of code in a vast digital realm.
    However, there’s a twist: you don’t get to pen down your own notes.
    Instead, you're given a legacy of existing code snippets, scattered across the system.
    This is the essence of Return Oriented Programming (ROP) exploits! Using nothing but the remnants of the system’s own code, you craft a cunning composition that dances to your own tune, bypassing modern security measures with elegance and stealth.

    Each snippet is like a musical phrase, ending in a "return" instruction, whisking you off to the next snippet in your clandestine concerto.
    With each leap and bound, you weave a nefarious narrative, circumventing security checks and executing unauthorized actions, all while under the unsuspecting nose of the system’s defenses.

    ROP is not just a hack; it’s a masterpiece of unauthorized orchestration, a ballet of borrowed instructions, choreographed with precision to achieve your clandestine objectives.
    With ROP, you step into a realm where every byte is a beat, and every return is a rhythm, embarking on an exhilarating journey of exploitation and discovery.
  challenges:
  - id: level-1-0
    name: level1.0
    description: Overwrite a return address to trigger a win function!
  - id: level-1-1
    name: level1.1
    description: Overwrite a return address to trigger a win function!
  - id: level-2-0
    name: level2.0
    description: Use ROP to trigger a two-stage win function!
  - id: level-2-1
    name: level2.1
    description: Use ROP to trigger a two-stage win function!
  - id: level-3-0
    name: level3.0
    description: Use ROP to trigger a multi-stage win function!
  - id: level-3-1
    name: level3.1
    description: Use ROP to trigger a multi-stage win function!
  - id: level-4-0
    name: level4.0
    description: Leverage a stack leak while crafting a ROP chain to obtain the flag!
  - id: level-4-1
    name: level4.1
    description: Leverage a stack leak while crafting a ROP chain to obtain the flag!
  - id: level-5-0
    name: level5.0
    description: Craft a ROP chain to obtain the flag, now with no stack leak!
  - id: level-5-1
    name: level5.1
    description: Craft a ROP chain to obtain the flag, now with no stack leak!
  - id: level-6-0
    name: level6.0
    description: Craft a ROP chain to obtain the flag, now with no syscall gadget!
  - id: level-6-1
    name: level6.1
    description: Craft a ROP chain to obtain the flag, now with no syscall gadget!
  - id: level-7-0
    name: level7.0
    description: Utilize a libc leak to ROP with libc!
  - id: level-7-1
    name: level7.1
    description: Utilize a libc leak to ROP with libc!
  - id: level-8-0
    name: level8.0
    description: ROP with libc, no free leak this time!
  - id: level-8-1
    name: level8.1
    description: ROP with libc, no free leak this time!
  - id: level-9-0
    name: level9.0
    description: Perform a stack pivot to gain control flow!
  - id: level-9-1
    name: level9.1
    description: Perform a stack pivot to gain control flow!
  - id: level-10-0
    name: level10.0
    description: Perform a partial overwrite to call the win function.
  - id: level-10-1
    name: level10.1
    description: Perform a partial overwrite to call the win function.
  - id: level-11-0
    name: level11.0
    description: Apply stack pivoting to call the win function.
  - id: level-11-1
    name: level11.1
    description: Apply stack pivoting to call the win function.
  - id: level-12-0
    name: level12.0
    description: Creatively apply stack pivoting to call the win function.
  - id: level-12-1
    name: level12.1
    description: Creatively apply stack pivoting to call the win function.
  - id: level-13-0
    name: level13.0
    description: Perform ROP when the function has a canary!
  - id: level-13-1
    name: level13.1
    description: Perform ROP when the function has a canary!
  - id: level-14-0
    name: level14.0
    description: Perform ROP against a network forkserver!
  - id: level-14-1
    name: level14.1
    description: Perform ROP against a network forkserver!
  - id: level-15-0
    name: level15.0
    description: Perform ROP when the stack frame returns to libc!
  - id: level-15-1
    name: level15.1
    description: Perform ROP when the stack frame returns to libc!
